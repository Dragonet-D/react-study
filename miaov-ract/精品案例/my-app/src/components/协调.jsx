// 协调
// 文章解释了React对比算法的选择以让组件更新可预测并使得高性能应用足够快

// 当你使用React, 在单一时间点你可以考虑 render() HANSHU 作为创建React元素的数.在下一次状态或者属性更新, render()函数将返回一个不同的React元素的数.React需要算出如何高效更新UI以匹配最新的数;

// 有一些解决将一棵树转换为另一棵树的最小操作算法问题的通用方案.然而,数中元素个数为n,最先进的算法的时间复杂度为O(n*n*n).

// 若我们在React中使用，展示1000个元素则需要进行10亿次的比较。这操作太过昂贵，相反，React基于两点假设，实现了一个启发的O(n)算法：

// 两个不同类型的元素将产生不同的树。
// 通过渲染器附带key属性，开发者可以示意哪些子元素可能是稳定的。
// 实践中，上述假设适用于大部分应用场景。